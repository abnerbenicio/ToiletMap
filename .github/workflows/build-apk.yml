name: Build APK with EAS and Notify Discord

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Instalar depend√™ncias
        run: npm install

      - name: Executar testes
        run: npm test -- --ci --runInBand --no-cache --forceExit --coverage

      - name: Enviar cobertura para SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=abnerbenicio_ToiletMap \
            -Dsonar.organization=baixium \
            -Dsonar.sources=src \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
  sonar:
    name: Quality Analysis with SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm install
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: SonarQube Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=abnerbenicio_ToiletMap \
            -Dsonar.organization=baixium \
            -Dsonar.sources=src \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN
  build:
    name: Build APK using Expo EAS and Notify Discord
    runs-on: ubuntu-latest
    needs: [test, sonar]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install Dependencies
        run: |
          npm install -g eas-cli
          npm install

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Run EAS Build
        id: eas-build
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          # Executar o build e capturar a sa√≠da JSON
          BUILD_JSON=$(eas build --platform android --profile preview --non-interactive --json)
          
          # Extrair URL de download (formato correto para a nova vers√£o do EAS)
          DOWNLOAD_URL=$(echo $BUILD_JSON | jq -r '.[0].artifacts.buildUrl')
          
          # Verificar se o URL foi obtido com sucesso
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "‚ùå Falha ao obter URL de download"
            exit 1
          fi
          
          # Exportar vari√°veis
          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
          echo "BUILD_STATUS=success" >> $GITHUB_ENV

      - name: Notify Discord on Success
        if: ${{ env.BUILD_STATUS == 'success' }}
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "content": "üöÄ Build finalizado com sucesso!",
              "embeds": [{
                "title": "Download APK",
                "description": "[Clique aqui para baixar](${{ env.DOWNLOAD_URL }})",
                "color": 5814783
              }]
            }' \
            $DISCORD_WEBHOOK_URL

      - name: Notify Discord on Failure
        if: ${{ failure() }}
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "content": "‚ùå **Falha no processo de build!** Verifique os logs do GitHub Actions."
            }' \
            $DISCORD_WEBHOOK_URL
